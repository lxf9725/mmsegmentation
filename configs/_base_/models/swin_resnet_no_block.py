# model settings
norm_cfg = dict(type='SyncBN', requires_grad=True)
backbone_norm_cfg = dict(type='LN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255)
model = dict(
    type='EncoderDecoder',
    data_preprocessor=data_preprocessor,
    backbone=dict(
        type='SwinResNetNoBlock',
        swin_pretrain_img_size=224,
        swin_embed_dims=96,
        swin_patch_size=4,
        swin_window_size=7,
        swin_mlp_ratio=4,
        swin_depths=[2, 2, 6, 2],
        swin_num_heads=[3, 6, 12, 24],
        swin_strides=(4, 2, 2, 2),
        out_indices=(0, 1, 2, 3),
        swin_qkv_bias=True,
        swin_qk_scale=None,
        swin_patch_norm=True,
        swin_drop_rate=0.,
        swin_attn_drop_rate=0.,
        swin_drop_path_rate=0.3,
        swin_use_abs_pos_embed=False,
        swin_act_cfg=dict(type='GELU'),
        swin_pretrained='pretrain/swin_base_patch4_window7_224.pth',
        res_depth=50,
        norm_cfg=norm_cfg,
        res_num_stages=4,
        res_base_channels=32,
        res_dilations=(1, 1, 1, 1),
        res_strides=(1, 2, 2, 2),
        res_norm_eval=False,
        res_deep_stem=True,
        res_style='pytorch',
        res_contract_dilation=True),
    decode_head=dict(
        type='UPerHead',
        in_channels=[128, 256, 512, 1024],
        in_index=[0, 1, 2, 3],
        pool_scales=(1, 2, 3, 6),
        channels=512,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=norm_cfg,
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=512,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=norm_cfg,
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    # model training and testing settings
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
